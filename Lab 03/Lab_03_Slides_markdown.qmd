---
title: "Lab 02"
author: "Justin Kao"
format: pdf
editor: visual
---

```{r}
# Load necessary libraries
library(ggplot2)
library(scatterplot3d)

# Set seed for reproducibility
set.seed(123)

# Number of points
n_points <- 10

# 1D: Generate random points on a line
points_1d <- data.frame(x = runif(n_points, 0, 1))

# 2D: Generate random points on a 2D plane
points_2d <- data.frame(x = runif(n_points, 0, 1), 
                        y = runif(n_points, 0, 1))

# 3D: Generate random points in a 3D space
points_3d <- data.frame(x = runif(n_points, 0, 1), 
                        y = runif(n_points, 0, 1), 
                        z = runif(n_points, 0, 1))

# Plot 1D
p1 <- ggplot(points_1d, aes(x = x, y = rep(0, n_points))) + 
  geom_point(size = 3, color = 'blue') +
  xlab("X") + ylab("") +
  ggtitle("1D Space") + 
  theme_minimal() + 
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank())

# Plot 2D
p2 <- ggplot(points_2d, aes(x = x, y = y)) + 
  geom_point(size = 3, color = 'red') +
  xlab("X") + ylab("Y") +
  ggtitle("2D Space") + 
  theme_minimal()

# Plot 3D using scatterplot3d
# This directly generates the 3D plot without storing it as a variable
p3 <- scatterplot3d(points_3d$x, points_3d$y, points_3d$z, 
              pch = 16, color = "green", 
              xlab = "X", ylab = "Y", zlab = "Z",
              main = "3D Space")

# Display 1D and 2D plots separately
print(p1)
print(p2)
print(p3)
```

```{r}
data("Ozone", package = "mlbench")
View(Ozone)
```

```{r}
names(Ozone) <- c("Month", "Day_of_Month", "Day_of_Week", "Ozone", 
                        "Pressure", "Wind", "Humidity", "Temp1", "Temp2", 
                        "Inversion_Height", "Pressure_Gradient", 
                        "Inversion_Temp", "Visibility")

Ozone <- na.omit(Ozone)


nrow(data)
Ozone$Day_of_Month <- as.numeric(Ozone$Day_of_Month)
Ozone$Day_of_Week <- as.numeric((Ozone$Day_of_Week))
str(Ozone)
```

```{r}
# Fit the full model with all variables
full_model <- lm(Ozone ~ ., data = Ozone)
```

```{r}
# Perform backward stepwise selection
backward_model <- step(full_model, direction = "backward")
```

```{r}
# Perform backward stepwise selection
backward_model <- step(full_model, direction = "backward")
```

```{r}
# Use drop1() to test the effect of dropping each variable
drop1(full_model, test = "F")
```

```{r}
# Fit the model with only significant variables
reduced_model <- lm(Ozone ~ Month + Humidity + Temp2, data = Ozone)

# View the summary of the reduced model
summary(reduced_model)
```

```{r}
# Fit the GLM with significant variables
glm_gaussian <- glm(Ozone ~ Month + Humidity + Temp2, family = gaussian, data = Ozone)

# View the summary of the GLM
summary(glm_gaussian)
```

```{r}
# Compare AIC of the GLM to the previous models (optional)
AIC(full_model, reduced_model, glm_model, glm_poisson)

```

```{r}
# For example, fitting a Poisson GLM if Ozone levels were counts
glm_poisson <- glm(Ozone ~ Month + Humidity + Temp2, family = poisson, data = Ozone)
summary(glm_poisson)
```

```{r}
# Fit a generalized linear model
full_model <- glm(Ozone ~ ., data = Ozone, family = gaussian())

# Perform backward stepwise selection
backward_model <- step(full_model, direction = "backward")
```

```{r}
# Fit the linear model (lm)
lm_model <- lm(Ozone ~ ., data = Ozone)

# Fit the GLM model (for example, using Gamma family)
glm_model <- glm(Ozone ~ ., data = Ozone, family = Gamma(link = "log"))

# Compare AIC
AIC(lm_model, glm_model)

```

```{r}
# Residual plot for lm model
plot(lm_model, which = 1)
```

```{r}
# Perform backward stepwise selection
backward_model <- step(lm_model, direction = "backward")
# Perform backward stepwise selection
backward_model <- step(glm_model, direction = "backward")
```
